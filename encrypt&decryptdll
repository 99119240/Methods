using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

public class SimpleEncryptionTool
{
    private const string IV = "1234567890123456"; // Replace with a strong initialization vector

    public static void Main()
    {
        Console.WriteLine("Simple Encryption Tool");

        Console.Write("Do you want to generate a random key? (Y/N): ");
        char generateRandomKey = Console.ReadKey().KeyChar;
        Console.WriteLine();

        string key;
        if (Char.ToUpper(generateRandomKey) == 'Y')
        {
            key = GenerateRandomKey();
            Console.WriteLine("Generated Random Key: " + key);
        }
        else
        {
            Console.Write("Enter secret key: ");
            key = Console.ReadLine();
        }

        Console.Write("Enter file path: ");
        string filePath = Console.ReadLine();

        Console.Write("Encrypt (E) or Decrypt (D): ");
        char action = Console.ReadKey().KeyChar;

        byte[] resultBytes;
        if (action == 'E' || action == 'e')
        {
            string content = File.ReadAllText(filePath);
            resultBytes = Encrypt(content, key, IV);
            File.WriteAllBytes(filePath + ".encrypted", resultBytes);
            Console.WriteLine("\nFile encrypted and saved as " + filePath + ".encrypted");
        }
        else if (action == 'D' || action == 'd')
        {
            byte[] encryptedBytes = File.ReadAllBytes(filePath);
            string decryptedText = Decrypt(encryptedBytes, key, IV);
            File.WriteAllText(filePath + ".decrypted", decryptedText);
            Console.WriteLine("\nFile decrypted and saved as " + filePath + ".decrypted");
        }
        else
        {
            Console.WriteLine("\nInvalid action. Please choose Encrypt (E) or Decrypt (D).");
        }
    }

    private static byte[] Encrypt(string plainText, string key, string iv)
    {
        using (Aes aesAlg = Aes.Create())
        {
            aesAlg.Key = Encoding.UTF8.GetBytes(key);
            aesAlg.IV = Encoding.UTF8.GetBytes(iv);

            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

            using (MemoryStream msEncrypt = new MemoryStream())
            {
                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {
                        swEncrypt.Write(plainText);
                    }
                }

                return msEncrypt.ToArray();
            }
        }
    }

    private static string Decrypt(byte[] cipherText, string key, string iv)
    {
        using (Aes aesAlg = Aes.Create())
        {
            aesAlg.Key = Encoding.UTF8.GetBytes(key);
            aesAlg.IV = Encoding.UTF8.GetBytes(iv);

            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

            using (MemoryStream msDecrypt = new MemoryStream(cipherText))
            {
                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                {
                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                    {
                        return srDecrypt.ReadToEnd();
                    }
                }
            }
        }
    }

    private static string GenerateRandomKey()
    {
        // This is a simple example, and in a real-world scenario, use a cryptographic random number generator.
        return Guid.NewGuid().ToString("N").Substring(0, 16);
    }
}
